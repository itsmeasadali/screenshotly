generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")  // Uncommented for connection pooling
}

model User {
  id                    String          @id
  email                 String          @unique
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  apiKeys               ApiKey[]
  
  // Billing fields
  stripeCustomerId      String?         @unique
  stripeSubscriptionId  String?         @unique
  stripePriceId         String?
  stripeCurrentPeriodEnd DateTime?
  plan                  Plan            @default(FREE)
  subscriptionStatus    SubscriptionStatus @default(INACTIVE)
  billingCycleStart     DateTime?
  billingCycleEnd       DateTime?
  
  // Usage tracking
  monthlyUsage          Int             @default(0)
  lastUsageReset        DateTime        @default(now())
}

model ApiKey {
  id          String       @id @default(cuid())
  name        String
  key         String       @unique
  userId      String
  status      KeyStatus    @default(ACTIVE)
  usageLimit  Int          @default(100)
  usageCount  Int          @default(0)
  lastUsedAt  DateTime?
  createdAt   DateTime     @default(now())
  expiresAt   DateTime
  revokedAt   DateTime?
  user        User         @relation(fields: [userId], references: [id])
  apiRequests ApiRequest[]

  @@index([key])
  @@index([userId])
}

model ApiRequest {
  id        String   @id @default(cuid())
  apiKeyId  String
  endpoint  String
  status    Int
  duration  Int
  createdAt DateTime @default(now())
  ip        String?
  userAgent String?
  apiKey    ApiKey   @relation(fields: [apiKeyId], references: [id])

  @@index([apiKeyId])
  @@index([createdAt])
}

enum KeyStatus {
  ACTIVE
  EXPIRED
  REVOKED
}

enum Plan {
  FREE
  PRO
}

enum SubscriptionStatus {
  INACTIVE
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}
